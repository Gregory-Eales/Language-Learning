import numpy as np
import random
import matplotlib.pyplot as plt

class Neural_Network(object):
    def __init__(self):
        # Define HyperParameters
        self.InputLayerSize = 2
        self.OutputLayerSize = 1
        self.HiddenLayerSize = 3
        # Weights
        self.W1 = np.random.randn(self.InputLayerSize, self.HiddenLayerSize)
        self.W2 = np.random.randn(self.HiddenLayerSize, self.OutputLayerSize)

    def forward(self, X):
        # Propagate inputs through network
        self.z2 = np.dot(X, self.W1)
        self.a2 = self.sigmoid(self.z2)
        self.z3 = np.dot(self.a2, self.W2)
        yHat = self.sigmoid(self.z3)
        print("X shape:", X.shape)
        print("W1 shape:", self.W1.shape)
        print("z2 shape:", self.z2.shape)
        print("a2 shape:", self.a2.shape)
        print("z3 shape:", self.z3.shape)
        print("y_hat shape:", yHat.shape)

        return yHat

    def sigmoid(self, z):
        # Apply sigmoid activation function
        return 1 / (1 + np.exp(-z))

    def sigmoid_prime(self, z):
        return np.exp(-z/((1+np.exp(-1))**2))


Baby_G = Neural_Network()
"""
X = np.zeros((15, 2))
for i in range(15):
    X[i, 0] = i
    X[i, 1] = i*2
"""


X = np.array(([0, 0], [1, 2], [2, 4], [3,6], [4,8], [5,10]), dtype=float)
y = np.array(([0], [2], [8], [18], [32], [50]), dtype=float)
X = X/np.amax(X, axis=0)
y = y/100
testvalues = np.arange(-5, 5, 0.01)
plt.plot(testvalues, Baby_G.sigmoid(testvalues))
plt.plot(testvalues, Baby_G.sigmoid_prime(testvalues)/100)
plt.ylabel("Cost Values")
plt.xlabel("Iteration")
plt.grid(1)
"""
plt.show()
"""
Baby_G.forward(X)
